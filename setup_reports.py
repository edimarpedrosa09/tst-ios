#!/usr/bin/env python3
"""
Script Completo para Configurar Relat√≥rios Avan√ßados
Execute: python setup_reports.py
"""
import os
import sys
import shutil
import subprocess
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ReportsSetup:
    """Classe para configura√ß√£o dos relat√≥rios avan√ßados"""
    
    def __init__(self):
        self.required_files = [
            'enhanced_admin_reports.py',
            'admin_reports_data.py', 
            'reports_config.py',
            'admin_pages.py',
            'main.py'
        ]
        
        self.required_packages = [
            'plotly>=5.15.0',
            'pandas>=1.5.0',
            'numpy>=1.24.0',
            'matplotlib>=3.6.0',
            'seaborn>=0.12.0'
        ]
        
        self.backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    def print_header(self):
        """Imprime cabe√ßalho do script"""
        print("=" * 70)
        print("üöÄ CONFIGURA√á√ÉO DE RELAT√ìRIOS AVAN√áADOS")
        print("üìä Sistema de Analytics Administrativos")
        print("=" * 70)
        print()
    
    def create_backup(self):
        """Cria backup dos arquivos importantes"""
        print("üìã Criando backup dos arquivos existentes...")
        
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            
            for file in ['admin_pages.py', 'main.py']:
                if os.path.exists(file):
                    shutil.copy2(file, os.path.join(self.backup_dir, file))
                    print(f"‚úÖ Backup criado: {file}")
            
            print(f"üìÅ Backup salvo em: {self.backup_dir}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar backup: {e}")
            return False
    
    def check_files(self):
        """Verifica se arquivos necess√°rios est√£o presentes"""
        print("üîç Verificando arquivos necess√°rios...")
        
        missing = []
        present = []
        
        for file in self.required_files:
            if os.path.exists(file):
                present.append(file)
                print(f"‚úÖ Encontrado: {file}")
            else:
                missing.append(file)
                print(f"‚ùå Faltando: {file}")
        
        if missing:
            print(f"\n‚ö†Ô∏è  Arquivos faltando: {len(missing)}")
            print("üìù Certifique-se de ter todos os arquivos do sistema de relat√≥rios")
            return False
        
        print(f"\n‚úÖ Todos os {len(present)} arquivos necess√°rios est√£o presentes!")
        return True
    
    def install_packages(self):
        """Instala pacotes Python necess√°rios"""
        print("üì¶ Instalando depend√™ncias para relat√≥rios...")
        
        # Verificar se j√° est√£o instalados
        missing_packages = []
        
        for package in self.required_packages:
            package_name = package.split('>=')[0]
            try:
                __import__(package_name)
                print(f"‚úÖ J√° instalado: {package_name}")
            except ImportError:
                missing_packages.append(package)
        
        if not missing_packages:
            print("‚úÖ Todas as depend√™ncias j√° est√£o instaladas!")
            return True
        
        print(f"üì• Instalando {len(missing_packages)} pacotes...")
        
        for package in missing_packages:
            try:
                print(f"‚è≥ Instalando {package}...")
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install', package
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(f"‚úÖ Instalado: {package}")
                
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erro ao instalar {package}: {e}")
                return False
        
        print("‚úÖ Todas as depend√™ncias foram instaladas!")
        return True
    
    def update_admin_pages(self):
        """Atualiza admin_pages.py para incluir relat√≥rios avan√ßados"""
        print("üîß Atualizando admin_pages.py...")
        
        try:
            with open('admin_pages.py', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar se j√° tem a integra√ß√£o
            if 'advanced_reports' in content and 'render_enhanced_reports_section' in content:
                print("‚úÖ admin_pages.py j√° tem integra√ß√£o de relat√≥rios!")
                return True
            
            # Atualizar navega√ß√£o - adicionar advanced_reports
            old_nav_list = '["dashboard", "users", "files", "reports", "logs"]'
            new_nav_list = '["dashboard", "users", "files", "reports", "advanced_reports", "logs"]'
            
            if old_nav_list in content:
                content = content.replace(old_nav_list, new_nav_list)
                print("‚úÖ Lista de navega√ß√£o atualizada")
            
            # Atualizar format_func
            old_format = '"reports": "üìà Relat√≥rios",'
            new_format = '''                "reports": "üìà Relat√≥rios B√°sicos",
                "advanced_reports": "üìä Relat√≥rios Avan√ßados",'''
            
            if old_format in content:
                content = content.replace(old_format, new_format)
                print("‚úÖ Labels de navega√ß√£o atualizadas")
            
            # Adicionar elif para advanced_reports
            old_elif = '''elif page == 'reports':
            render_reports_section(username, user_manager)
        elif page == 'logs':'''
            
            new_elif = '''elif page == 'reports':
            render_reports_section(username, user_manager)
        elif page == 'advanced_reports':
            render_advanced_reports_section(username, user_manager)
        elif page == 'logs':'''
            
            if old_elif in content:
                content = content.replace(old_elif, new_elif)
                print("‚úÖ Roteamento de p√°ginas atualizado")
            
            # Adicionar fun√ß√£o render_advanced_reports_section
            function_to_add = '''

def render_advanced_reports_section(username: str, user_manager=None):
    """Renderiza se√ß√£o de relat√≥rios avan√ßados com gr√°ficos"""
    
    try:
        # Importar sistema de relat√≥rios avan√ßados
        from enhanced_admin_reports import render_enhanced_reports_section
        from database import DatabaseManager
        from config import Config
        
        # Inicializar database manager
        db_manager = DatabaseManager(Config.DATABASE_URL)
        
        # Renderizar relat√≥rios avan√ßados
        render_enhanced_reports_section(username, user_manager, db_manager)
        
    except ImportError as import_error:
        logger.error(f"Enhanced reports not available: {import_error}")
        st.error("‚ùå Sistema de relat√≥rios avan√ßados n√£o dispon√≠vel")
        st.info("Execute: pip install plotly pandas numpy matplotlib seaborn")
        
        # Mostrar instru√ß√µes de instala√ß√£o
        st.code("pip install plotly>=5.15.0 pandas>=1.5.0 numpy>=1.24.0")
        
        # Fallback para relat√≥rios b√°sicos
        st.warning("üìä Usando relat√≥rios b√°sicos como alternativa")
        render_reports_section(username, user_manager)
        
    except Exception as e:
        logger.error(f"Advanced reports error: {e}")
        st.error(f"‚ùå Erro nos relat√≥rios avan√ßados: {e}")
        
        # Informa√ß√µes de debug
        with st.expander("üîç Informa√ß√µes de Debug"):
            st.write("**Erro:**", str(e))
            st.write("**Usu√°rio:**", username)
            st.write("**Timestamp:**", datetime.now().isoformat())
        
        # Tentar relat√≥rios b√°sicos como fallback
        st.warning("üìä Tentando carregar relat√≥rios b√°sicos...")
        try:
            render_reports_section(username, user_manager)
        except Exception as fallback_error:
            st.error(f"‚ùå Erro tamb√©m nos relat√≥rios b√°sicos: {fallback_error}")
'''
            
            # Adicionar fun√ß√£o antes do final do arquivo
            if not 'render_advanced_reports_section' in content:
                # Encontrar local para inserir (antes do √∫ltimo logger.info)
                last_logger = content.rfind('logger.info("‚úÖ')
                if last_logger != -1:
                    content = content[:last_logger] + function_to_add + '\n\n' + content[last_logger:]
                else:
                    # Se n√£o encontrar, adicionar no final
                    content += function_to_add
                
                print("‚úÖ Fun√ß√£o de relat√≥rios avan√ßados adicionada")
            
            # Salvar arquivo atualizado
            with open('admin_pages.py', 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ admin_pages.py atualizado com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao atualizar admin_pages.py: {e}")
            return False
    
    def update_dashboard_actions(self):
        """Adiciona bot√£o para relat√≥rios avan√ßados no dashboard"""
        print("üéõÔ∏è  Atualizando dashboard com link para relat√≥rios...")
        
        try:
            with open('admin_pages.py', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Procurar pela fun√ß√£o render_admin_dashboard
            if 'render_admin_dashboard' in content:
                # Adicionar bot√£o destacado para relat√≥rios avan√ßados
                dashboard_addition = '''        
        # Link destacado para relat√≥rios avan√ßados
        st.markdown("---")
        st.info("üí° **Novo!** Acesse os **Relat√≥rios Avan√ßados** para an√°lises detalhadas com gr√°ficos interativos!")
        
        if st.button("üöÄ Ir para Relat√≥rios Avan√ßados", type="primary", use_container_width=True):
            st.session_state.admin_current_page = "advanced_reports"
            st.rerun()'''
            
                # Encontrar local para inserir (antes do except final da fun√ß√£o)
                dashboard_end = content.find('except Exception as e:', content.find('render_admin_dashboard'))
                if dashboard_end != -1:
                    # Inserir antes do except
                    content = content[:dashboard_end] + dashboard_addition + '\n        \n    ' + content[dashboard_end:]
                    
                    with open('admin_pages.py', 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    print("‚úÖ Dashboard atualizado com link para relat√≥rios!")
                    return True
            
            print("‚ö†Ô∏è  Dashboard n√£o p√¥de ser atualizado automaticamente")
            return True  # N√£o √© cr√≠tico
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao atualizar dashboard: {e}")
            return True  # N√£o √© cr√≠tico
    
    def test_integration(self):
        """Testa se a integra√ß√£o est√° funcionando"""
        print("üß™ Testando integra√ß√£o...")
        
        try:
            # Testar imports b√°sicos
            import enhanced_admin_reports
            print("‚úÖ enhanced_admin_reports importado")
            
            import admin_reports_data
            print("‚úÖ admin_reports_data importado")
            
            import reports_config
            print("‚úÖ reports_config importado")
            
            # Testar depend√™ncias
            import plotly
            print("‚úÖ plotly importado")
            
            import pandas
            print("‚úÖ pandas importado")
            
            import numpy
            print("‚úÖ numpy importado")
            
            # Testar fun√ß√£o principal
            from enhanced_admin_reports import render_enhanced_reports_section
            print("‚úÖ Fun√ß√£o principal dos relat√≥rios dispon√≠vel")
            
            return True
            
        except ImportError as e:
            print(f"‚ùå Erro de importa√ß√£o: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            return False
    
    def show_success_message(self):
        """Mostra mensagem de sucesso"""
        print("\n" + "=" * 70)
        print("üéâ INTEGRA√á√ÉO DOS RELAT√ìRIOS CONCLU√çDA COM SUCESSO!")
        print("=" * 70)
        print()
        print("üìã PR√ìXIMOS PASSOS:")
        print("1. üîÑ Reinicie sua aplica√ß√£o Streamlit")
        print("2. üîê Fa√ßa login como administrador")
        print("3. üõ°Ô∏è  Acesse a aba 'Administra√ß√£o'")
        print("4. üìä Clique em 'Relat√≥rios Avan√ßados'")
        print()
        print("üöÄ RECURSOS DISPON√çVEIS:")
        print("‚Ä¢ üìä Dashboard Geral com m√©tricas avan√ßadas")
        print("‚Ä¢ üë• Analytics detalhados de Usu√°rios")
        print("‚Ä¢ üìÅ Analytics completos de Arquivos")
        print("‚Ä¢ üîê Analytics de Seguran√ßa e MFA")
        print("‚Ä¢ üìà Analytics de Performance do Sistema")
        print("‚Ä¢ üéØ Centro de A√ß√µes R√°pidas")
        print("‚Ä¢ üîç Filtros e per√≠odos personaliz√°veis")
        print("‚Ä¢ üìà Gr√°ficos interativos com Plotly")
        print()
        print("üí° DICA: Use os filtros de per√≠odo para an√°lises espec√≠ficas!")
        print()
        print("=" * 70)
    
    def run(self):
        """Executa todo o processo de configura√ß√£o"""
        self.print_header()
        
        # Passo 1: Verificar arquivos
        if not self.check_files():
            print("\n‚ùå Configura√ß√£o abortada - arquivos faltando")
            print("üìù Certifique-se de ter todos os arquivos do sistema de relat√≥rios")
            return False
        
        print()
        
        # Passo 2: Criar backup
        if not self.create_backup():
            print("\n‚ö†Ô∏è  Continuando sem backup...")
        
        print()
        
        # Passo 3: Instalar depend√™ncias
        if not self.install_packages():
            print("\n‚ùå Configura√ß√£o abortada - erro nas depend√™ncias")
            return False
        
        print()
        
        # Passo 4: Atualizar admin_pages.py
        if not self.update_admin_pages():
            print("\n‚ùå Configura√ß√£o abortada - erro ao atualizar admin_pages.py")
            return False
        
        print()
        
        # Passo 5: Atualizar dashboard
        self.update_dashboard_actions()
        
        print()
        
        # Passo 6: Testar integra√ß√£o
        if not self.test_integration():
            print("\n‚ö†Ô∏è  Integra√ß√£o pode ter problemas - verifique logs")
            print("üí° Mesmo assim, tente executar o sistema")
        
        print()
        
        # Sucesso!
        self.show_success_message()
        return True

def main():
    """Fun√ß√£o principal"""
    setup = ReportsSetup()
    success = setup.run()
    
    if not success:
        print("\n" + "=" * 50)
        print("‚ùå CONFIGURA√á√ÉO N√ÉO CONCLU√çDA")
        print("üìû Verifique os erros acima e tente novamente")
        print("=" * 50)
        return False
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Configura√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico: {e}")
        sys.exit(1)
