"""
Sistema Administrativo Completo - admin_pages.py - VERS√ÉO CORRIGIDA FINAL
Corrige TODAS as chamadas de dele√ß√£o para usar hard delete por padr√£o
"""
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import hashlib
import secrets
import string

# CONFIGURA√á√ÉO ROBUSTA DO LOGGER
import logging
import sys

def setup_logger():
    """Configura logger de forma robusta"""
    logger = logging.getLogger('admin_pages')
    
    if logger.handlers:
        return logger
    
    handler = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    logger.propagate = False
    
    return logger

# Criar logger global
logger = setup_logger()

def render_admin_panel(username: str, user_manager=None):
    """Painel administrativo principal com verifica√ß√£o de permiss√µes CORRIGIDA"""
    
    # VERIFICA√á√ÉO DE PERMISS√ïES ROBUSTA E CORRIGIDA
    is_admin = check_admin_permissions_comprehensive(username, user_manager)
    
    if not is_admin:
        st.error("‚ùå Acesso negado. Apenas administradores podem acessar esta se√ß√£o.")
        st.info(f"üí° Username atual: '{username}' - Para ser admin, seu username deve conter 'admin'")
        
        # Informa√ß√µes de debug detalhadas
        with st.expander("üîç Debug - Verifica√ß√£o de Permiss√µes Detalhada"):
            debug_admin_permissions(username, user_manager)
        return
    
    st.header("üõ°Ô∏è Painel Administrativo")
    st.success(f"‚úÖ Acesso liberado para: {username}")
    
    # Sidebar de navega√ß√£o administrativa
    with st.sidebar:
        st.markdown("---")
        st.subheader("üõ°Ô∏è Admin")
        
        admin_page = st.selectbox(
            "Se√ß√£o:",
            ["dashboard", "users", "files", "reports", "advanced_reports", "user_management", "system_logs"],
            format_func=lambda x: {
                "dashboard": "üìä Dashboard",
                "users": "üë• Usu√°rios",
                "files": "üìÅ Arquivos",
                "reports": "üìà Relat√≥rios B√°sicos",
                "advanced_reports": "üìä Relat√≥rios Avan√ßados",
                "user_management": "üë§ Gerenciar Usu√°rios",
                "system_logs": "üìã Logs do Sistema"
            }[x],
            key="admin_nav_select"
        )
        
        st.session_state.admin_current_page = admin_page
        
        # Info do admin com status de permiss√µes
        st.markdown("---")
        st.caption(f"üë§ {username}")
        st.caption(f"üõ°Ô∏è Admin: {'‚úÖ' if is_admin else '‚ùå'}")
        st.caption(f"üïí {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Renderizar p√°gina selecionada
    try:
        page = st.session_state.get('admin_current_page', 'dashboard')
        
        if page == 'dashboard':
            render_admin_dashboard()
        elif page == 'users':
            render_admin_users()
        elif page == 'files':
            render_admin_files()
        elif page == 'reports':
            render_reports_section(username, user_manager)
        elif page == 'advanced_reports':
            render_advanced_reports_section(username, user_manager)
        elif page == 'user_management':
            # PASSAR is_admin EXPLICITAMENTE
            render_user_management_section(username, user_manager, is_admin)
        elif page == 'system_logs':
            render_system_logs_section()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar se√ß√£o: {e}")
        logger.error(f"Admin section error: {e}")

def check_admin_permissions_comprehensive(username: str, user_manager=None) -> bool:
    """
    Verifica√ß√£o COMPREHENSIVE de permiss√µes administrativas
    Usa m√∫ltiplos m√©todos para garantir que o admin seja reconhecido
    """
    logger.info(f"üîç Checking admin permissions for: {username}")
    
    # M√âTODO 1: Verifica√ß√£o por username (mais b√°sica e confi√°vel)
    if is_admin_by_username(username):
        logger.info(f"‚úÖ Admin confirmed by username: {username}")
        return True
    
    # M√âTODO 2: Verifica√ß√£o via user_manager se dispon√≠vel
    if user_manager:
        try:
            # Verificar se tem m√©todo has_permission
            if hasattr(user_manager, 'has_permission'):
                from user_management import Permission
                if user_manager.has_permission(username, Permission.DELETE_USERS):
                    logger.info(f"‚úÖ Admin confirmed by user_manager permissions: {username}")
                    return True
            
            # Verificar role diretamente
            if hasattr(user_manager, 'get_user_role'):
                role = user_manager.get_user_role(username)
                if role in ['admin', 'super_admin']:
                    logger.info(f"‚úÖ Admin confirmed by role: {username} -> {role}")
                    return True
        except Exception as e:
            logger.warning(f"User manager check failed: {e}")
    
    # M√âTODO 3: Verifica√ß√£o direta no banco de dados
    try:
        admin_by_db = check_admin_in_database(username)
        if admin_by_db:
            logger.info(f"‚úÖ Admin confirmed by database: {username}")
            return True
    except Exception as e:
        logger.warning(f"Database check failed: {e}")
    
    # M√âTODO 4: Verifica√ß√£o se √© o primeiro/√∫nico usu√°rio
    try:
        if is_first_user(username):
            logger.info(f"‚úÖ Admin confirmed as first user: {username}")
            return True
    except Exception as e:
        logger.warning(f"First user check failed: {e}")
    
    logger.warning(f"‚ùå Admin permissions DENIED for: {username}")
    return False

def is_admin_by_username(username: str) -> bool:
    """Verifica√ß√£o por username - m√©todo mais b√°sico e confi√°vel"""
    admin_usernames = [
        'admin', 'administrator', 'root', 'adm', 'administrador',
        'admin1', 'admin123', 'sa', 'sysadmin', 'superuser', 'administrator'
    ]
    
    username_lower = username.lower()
    
    # Verifica√ß√£o exata
    if username_lower in admin_usernames:
        return True
    
    # Verifica√ß√£o se cont√©m 'admin'
    if 'admin' in username_lower:
        return True
    
    # Verifica√ß√£o se cont√©m 'root'
    if 'root' in username_lower:
        return True
    
    return False

def check_admin_in_database(username: str) -> bool:
    """Verifica√ß√£o direta no banco de dados"""
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Tentar tabela estendida primeiro
        try:
            cursor.execute("SELECT role FROM users_extended WHERE username = %s", (username,))
            result = cursor.fetchone()
            if result:
                role = result[0]
                cursor.close()
                conn.close()
                return role in ['admin', 'super_admin', 'administrator']
        except Exception as e:
            logger.debug(f"Extended table check failed: {e}")
        
        # Verificar tabela b√°sica
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = %s AND is_active = TRUE", (username,))
        user_exists = cursor.fetchone()[0] > 0
        
        cursor.close()
        conn.close()
        
        # Se usu√°rio existe e username indica admin, considerar admin
        if user_exists and is_admin_by_username(username):
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"Database admin check error: {e}")
        return False

def is_first_user(username: str) -> bool:
    """Verifica se √© o primeiro/√∫nico usu√°rio (que deve ser admin)"""
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT username FROM users WHERE is_active = TRUE ORDER BY created_at LIMIT 1")
        first_user = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        # Se h√° apenas 1 usu√°rio ou se √© o primeiro usu√°rio criado
        if total_users == 1 or (first_user and first_user[0] == username):
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"First user check error: {e}")
        return False

def debug_admin_permissions(username: str, user_manager=None):
    """Debug detalhado das verifica√ß√µes de permiss√£o"""
    st.write("**üîç Verifica√ß√£o Detalhada de Permiss√µes:**")
    
    # Teste 1: Username
    username_check = is_admin_by_username(username)
    st.write(f"1. **Username check**: {'‚úÖ' if username_check else '‚ùå'}")
    st.write(f"   - Username: '{username}'")
    st.write(f"   - Cont√©m 'admin': {'admin' in username.lower()}")
    st.write(f"   - Cont√©m 'root': {'root' in username.lower()}")
    
    # Teste 2: User Manager
    user_manager_check = False
    if user_manager:
        try:
            if hasattr(user_manager, 'get_user_role'):
                role = user_manager.get_user_role(username)
                user_manager_check = role in ['admin', 'super_admin']
                st.write(f"2. **User Manager check**: {'‚úÖ' if user_manager_check else '‚ùå'}")
                st.write(f"   - Role detectado: {role}")
            else:
                st.write("2. **User Manager check**: ‚ö†Ô∏è M√©todo get_user_role n√£o dispon√≠vel")
        except Exception as e:
            st.write(f"2. **User Manager check**: ‚ùå Erro: {e}")
    else:
        st.write("2. **User Manager check**: ‚ö†Ô∏è User manager n√£o dispon√≠vel")
    
    # Teste 3: Database
    try:
        db_check = check_admin_in_database(username)
        st.write(f"3. **Database check**: {'‚úÖ' if db_check else '‚ùå'}")
    except Exception as e:
        st.write(f"3. **Database check**: ‚ùå Erro: {e}")
    
    # Teste 4: First User
    try:
        first_user_check = is_first_user(username)
        st.write(f"4. **First user check**: {'‚úÖ' if first_user_check else '‚ùå'}")
    except Exception as e:
        st.write(f"4. **First user check**: ‚ùå Erro: {e}")
    
    # Resultado final
    final_result = check_admin_permissions_comprehensive(username, user_manager)
    st.write(f"**üéØ Resultado Final**: {'‚úÖ ADMIN' if final_result else '‚ùå NOT ADMIN'}")
    
    # Sugest√µes
    if not final_result:
        st.write("**üí° Para obter acesso admin:**")
        st.write("- Crie um usu√°rio com username que contenha 'admin' (ex: 'admin', 'myadmin', 'admin123')")
        st.write("- Ou configure o role='admin' na tabela users_extended")
        st.write("- Ou seja o primeiro usu√°rio do sistema")

def render_user_management_section(username: str, user_manager=None, is_admin=False):
    """Renderiza se√ß√£o COMPLETA de gerenciamento de usu√°rios - COM PERMISS√ïES CORRIGIDAS"""
    
    st.subheader("üë§ Gerenciamento Completo de Usu√°rios")
    
    # Verificar se user_manager est√° dispon√≠vel
    if not user_manager:
        st.error("‚ùå Sistema de gerenciamento de usu√°rios n√£o dispon√≠vel")
        return
    
    # VERIFICA√á√ÉO DE PERMISS√ïES CORRIGIDA - usar is_admin passado como par√¢metro
    if not is_admin:
        st.error("‚ùå Sem permiss√£o para gerenciar usu√°rios")
        st.info("üí° Apenas administradores podem acessar esta se√ß√£o")
        return
    
    # Tabs do gerenciamento
    tab1, tab2, tab3, tab4 = st.tabs([
        "üë• Lista de Usu√°rios",
        "‚ûï Criar Usu√°rio", 
        "üîç Buscar Usu√°rios",
        "üìä Estat√≠sticas"
    ])
    
    with tab1:
        render_users_list_no_forms(username, user_manager, is_admin)
    
    with tab2:
        render_create_user_no_forms(username, user_manager, is_admin)
    
    with tab3:
        render_user_search_no_forms(username, user_manager, is_admin)
    
    with tab4:
        render_user_statistics_no_forms(username, user_manager, is_admin)

def render_users_list_no_forms(admin_username: str, user_manager, is_admin=False):
    """Renderiza lista de usu√°rios SEM formul√°rios aninhados - COM HARD DELETE"""
    
    st.write("### üë• Lista de Usu√°rios")
    
    try:
        users = user_manager.get_all_users(admin_username)
        
        if not users:
            st.info("üìã Nenhum usu√°rio encontrado")
            return
        
        st.write(f"üìä **Total de usu√°rios:** {len(users)}")
        
        # Filtros em colunas separadas - SEM FORMUL√ÅRIO
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filter_role = st.selectbox(
                "Filtrar por Role:",
                ["Todos", "super_admin", "admin", "manager", "user", "guest"],
                key="filter_role_list"
            )
        
        with col2:
            filter_status = st.selectbox(
                "Filtrar por Status:",
                ["Todos", "active", "inactive", "pending", "suspended"],
                key="filter_status_list"
            )
        
        with col3:
            search_term = st.text_input(
                "Buscar usu√°rio:",
                placeholder="nome ou username...",
                key="search_users_term"
            )
        
        # Aplicar filtros
        filtered_users = users.copy()
        
        if filter_role != "Todos":
            filtered_users = [u for u in filtered_users if u.get('role') == filter_role]
        
        if filter_status != "Todos":
            filtered_users = [u for u in filtered_users if u.get('status') == filter_status]
        
        if search_term:
            search_lower = search_term.lower()
            filtered_users = [
                u for u in filtered_users 
                if search_lower in u['username'].lower() 
                or search_lower in (u.get('full_name') or '').lower()
            ]
        
        st.write(f"üìã **Exibindo:** {len(filtered_users)} usu√°rios")
        
        # Lista de usu√°rios - SEM FORMUL√ÅRIOS
        for idx, user in enumerate(filtered_users):
            render_user_card_with_hard_delete(user, idx, admin_username, user_manager, is_admin)
            
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar usu√°rios: {e}")
        logger.error(f"Error loading users: {e}")

def render_user_card_with_hard_delete(user: Dict, idx: int, admin_username: str, user_manager, is_admin=False):
    """Renderiza card individual de usu√°rio - COM HARD DELETE CORRIGIDO"""
    
    with st.container():
        col1, col2, col3, col4 = st.columns([3, 1, 1, 2])
        
        with col1:
            # Informa√ß√µes principais
            admin_badge = " üõ°Ô∏è" if user.get('role') in ['admin', 'super_admin'] else ""
            st.write(f"**üë§ {user.get('full_name') or user['username']}{admin_badge}**")
            st.caption(f"@{user['username']} ‚Ä¢ {user.get('email') or 'Sem email'}")
            
            if user.get('department'):
                st.caption(f"üè¢ {user['department']}")
        
        with col2:
            # Status e Role
            status_color = {
                'active': 'üü¢',
                'inactive': 'üî¥', 
                'pending': 'üü°',
                'suspended': 'üü†'
            }.get(user.get('status'), '‚ö™')
            
            st.write(f"{status_color} {user.get('status', 'active').title()}")
            st.caption(f"üé≠ {user.get('role', 'user').replace('_', ' ').title()}")
        
        with col3:
            # MFA e Login
            mfa_icon = "üîê" if user.get('mfa_enabled') else "üîì"
            st.write(f"{mfa_icon} MFA")
            
            if user.get('last_login'):
                try:
                    last_login = user['last_login']
                    if isinstance(last_login, str):
                        last_login = datetime.fromisoformat(last_login.replace('Z', '+00:00'))
                    st.caption(f"üïí {last_login.strftime('%d/%m/%Y')}")
                except:
                    st.caption("üïí Data inv√°lida")
            else:
                st.caption("üïí Nunca logou")
        
        with col4:
            # A√ß√µes - USANDO SESSION STATE PARA EVITAR FORMUL√ÅRIOS - COM HARD DELETE
            if user['username'] != admin_username and is_admin:
                
                # Key √∫nico para este usu√°rio
                user_key = user['username']
                
                # Bot√£o principal de a√ß√µes
                if st.button("‚öôÔ∏è A√ß√µes", key=f"actions_btn_{user_key}_{idx}", use_container_width=True):
                    # Toggle do estado de a√ß√µes
                    current_state = st.session_state.get(f"show_actions_{user_key}", False)
                    st.session_state[f"show_actions_{user_key}"] = not current_state
                    st.rerun()
                
                # Mostrar a√ß√µes se ativadas
                if st.session_state.get(f"show_actions_{user_key}", False):
                    
                    # Container para a√ß√µes
                    with st.container():
                        st.write("**A√ß√µes dispon√≠veis:**")
                        
                        # Reset de senha
                        if st.button(f"üîë Reset Senha", key=f"reset_{user_key}_{idx}", use_container_width=True):
                            new_password = _generate_temp_password()
                            success, message = _reset_user_password_simple(
                                admin_username, user['username'], new_password, user_manager
                            )
                            
                            if success:
                                st.success(f"‚úÖ Senha resetada!")
                                st.info(f"üîë Nova senha: `{new_password}`")
                                st.warning("‚ö†Ô∏è Anote esta senha!")
                                # Fechar a√ß√µes ap√≥s sucesso
                                st.session_state[f"show_actions_{user_key}"] = False
                                st.rerun()
                            else:
                                st.error(f"‚ùå {message}")
                        
                        # Toggle Status
                        new_status = 'inactive' if user.get('status') == 'active' else 'active'
                        status_action = 'Desativar' if user.get('status') == 'active' else 'Ativar'
                        
                        if st.button(f"üîÑ {status_action}", key=f"toggle_{user_key}_{idx}", use_container_width=True):
                            success, message = user_manager.update_user(
                                admin_username, 
                                user['username'], 
                                {'status': new_status}
                            )
                            
                            if success:
                                st.success(f"‚úÖ Status alterado!")
                                # Fechar a√ß√µes ap√≥s sucesso
                                st.session_state[f"show_actions_{user_key}"] = False
                                st.rerun()
                            else:
                                st.error(f"‚ùå {message}")
                        
                        # DELE√á√ÉO COM OP√á√ïES - HARD DELETE POR PADR√ÉO
                        if not st.session_state.get(f"confirm_delete_{user_key}", False):
                            if st.button(f"üóëÔ∏è Deletar do Banco", key=f"delete_{user_key}_{idx}", type="secondary", use_container_width=True):
                                st.session_state[f"confirm_delete_{user_key}"] = True
                                st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è **Dele√ß√£o Permanente**")
                            st.write(f"Deletar usu√°rio **{user['username']}** do banco?")
                            
                            # Op√ß√µes de dele√ß√£o
                            col_type1, col_type2 = st.columns(2)
                            
                            with col_type1:
                                if st.button("üóëÔ∏è Hard Delete", key=f"hard_del_{user_key}_{idx}", 
                                           help="Remove permanentemente do banco", use_container_width=True):
                                    # HARD DELETE - NOVA FUN√á√ÉO
                                    success, message = user_manager.delete_user(
                                        admin_username, 
                                        user['username'], 
                                        delete_type="hard",  # HARD DELETE
                                        delete_files=True    # Deletar arquivos tamb√©m
                                    )
                                    
                                    if success:
                                        st.success(f"‚úÖ {message}")
                                        # Limpar estados
                                        st.session_state[f"confirm_delete_{user_key}"] = False
                                        st.session_state[f"show_actions_{user_key}"] = False
                                        st.balloons()
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå {message}")
                            
                            with col_type2:
                                if st.button("üìù Soft Delete", key=f"soft_del_{user_key}_{idx}", 
                                           help="Apenas desativa (mant√©m no banco)", use_container_width=True):
                                    # SOFT DELETE - COMPORTAMENTO ORIGINAL
                                    success, message = user_manager.delete_user(
                                        admin_username, 
                                        user['username'], 
                                        delete_type="soft",   # SOFT DELETE
                                        delete_files=False    # Manter arquivos
                                    )
                                    
                                    if success:
                                        st.success(f"‚úÖ {message}")
                                        # Limpar estados
                                        st.session_state[f"confirm_delete_{user_key}"] = False
                                        st.session_state[f"show_actions_{user_key}"] = False
                                        st.rerun()
                                    else:
                                        st.error(f"‚ùå {message}")
                            
                            # Cancelar
                            if st.button("‚ùå Cancelar", key=f"cancel_del_{user_key}_{idx}", use_container_width=True):
                                st.session_state[f"confirm_delete_{user_key}"] = False
                                st.rerun()
                        
                        # Editar usu√°rio (modal simple)
                        if st.button(f"‚úèÔ∏è Editar", key=f"edit_{user_key}_{idx}", use_container_width=True):
                            st.session_state[f"editing_{user_key}"] = True
                            st.session_state[f"show_actions_{user_key}"] = False
                            st.rerun()
                        
                        # Fechar a√ß√µes
                        if st.button("‚ùå Fechar", key=f"close_{user_key}_{idx}", use_container_width=True):
                            st.session_state[f"show_actions_{user_key}"] = False
                            st.rerun()
            
            elif user['username'] == admin_username:
                st.info("üë§ Voc√™")
            elif not is_admin:
                st.warning("üîí Sem permiss√£o")
        
        # Editor inline simples (fora do container principal)
        if st.session_state.get(f"editing_{user['username']}", False):
            render_simple_user_editor(user, admin_username, user_manager)
        
        st.divider()

def render_simple_user_editor(user: Dict, admin_username: str, user_manager):
    """Editor simples de usu√°rio SEM FORMUL√ÅRIOS ANINHADOS"""
    
    user_key = user['username']
    
    with st.container():
        st.write(f"‚úèÔ∏è **Editando: {user['username']}**")
        
        # Campos de edi√ß√£o em colunas
        col1, col2 = st.columns(2)
        
        with col1:
            new_full_name = st.text_input(
                "Nome Completo:", 
                value=user.get('full_name', ''),
                key=f"edit_name_{user_key}"
            )
            new_email = st.text_input(
                "Email:", 
                value=user.get('email', ''),
                key=f"edit_email_{user_key}"
            )
        
        with col2:
            new_department = st.text_input(
                "Departamento:", 
                value=user.get('department', ''),
                key=f"edit_dept_{user_key}"
            )
            
            current_role_idx = 0
            roles = ["user", "manager", "admin", "super_admin"]
            if user.get('role') in roles:
                current_role_idx = roles.index(user.get('role'))
            
            new_role = st.selectbox(
                "Role:", 
                roles,
                index=current_role_idx,
                key=f"edit_role_{user_key}"
            )
        
        # Bot√µes de a√ß√£o
        col_save, col_cancel = st.columns(2)
        
        with col_save:
            if st.button("üíæ Salvar", key=f"save_{user_key}", use_container_width=True):
                # Preparar updates
                updates = {}
                
                if new_full_name != user.get('full_name', ''):
                    updates['full_name'] = new_full_name
                
                if new_email != user.get('email', ''):
                    updates['email'] = new_email
                
                if new_department != user.get('department', ''):
                    updates['department'] = new_department
                
                if new_role != user.get('role', 'user'):
                    updates['role'] = new_role
                
                if updates:
                    success, message = user_manager.update_user(
                        admin_username, user['username'], updates
                    )
                    
                    if success:
                        st.success(f"‚úÖ {message}")
                        st.session_state[f"editing_{user_key}"] = False
                        st.rerun()
                    else:
                        st.error(f"‚ùå {message}")
                else:
                    st.info("‚ÑπÔ∏è Nenhuma altera√ß√£o detectada")
        
        with col_cancel:
            if st.button("‚ùå Cancelar", key=f"cancel_{user_key}", use_container_width=True):
                st.session_state[f"editing_{user_key}"] = False
                st.rerun()

def render_create_user_no_forms(admin_username: str, user_manager, is_admin=False):
    """Renderiza cria√ß√£o de usu√°rio SEM formul√°rios aninhados - COM PERMISS√ïES CORRIGIDAS"""
    
    st.write("### ‚ûï Criar Novo Usu√°rio")
    
    if not is_admin:
        st.error("‚ùå Sem permiss√£o para criar usu√°rios")
        return
    
    # Usar session state para controlar o modo de cria√ß√£o
    if not st.session_state.get('creating_user', False):
        if st.button("‚ûï Iniciar Cria√ß√£o de Usu√°rio", type="primary", use_container_width=True):
            st.session_state['creating_user'] = True
            st.rerun()
        return
    
    # Modo de cria√ß√£o ativo
    st.write("üìù **Preencha os dados do novo usu√°rio**")
    
    # Campos em colunas
    col1, col2 = st.columns(2)
    
    with col1:
        username = st.text_input(
            "Usu√°rio (login):", 
            placeholder="usuario.nome",
            key="create_username",
            help="Apenas letras, n√∫meros, pontos e underscores"
        )
        
        full_name = st.text_input(
            "Nome Completo:", 
            placeholder="Jo√£o Silva",
            key="create_fullname"
        )
        
        email = st.text_input(
            "Email:", 
            placeholder="joao.silva@empresa.com",
            key="create_email"
        )
    
    with col2:
        password = st.text_input(
            "Senha:", 
            type="password",
            key="create_password",
            help="M√≠nimo 8 caracteres"
        )
        
        department = st.text_input(
            "Departamento:", 
            placeholder="TI, RH, Financeiro...",
            key="create_department"
        )
        
        role = st.selectbox(
            "Role:",
            ["user", "manager", "admin", "super_admin"],
            index=0,
            key="create_role"
        )
    
    # Op√ß√µes adicionais
    generate_password = st.checkbox(
        "üîë Gerar senha autom√°tica (se campo senha vazio)",
        value=True,
        key="create_auto_password"
    )
    
    notes = st.text_area(
        "Observa√ß√µes:",
        placeholder="Informa√ß√µes adicionais...",
        key="create_notes"
    )
    
    # Bot√µes de a√ß√£o
    col_create, col_cancel = st.columns(2)
    
    with col_create:
        if st.button("üë§ Criar Usu√°rio", type="primary", use_container_width=True):
            # Valida√ß√µes
            errors = []
            
            if not username:
                errors.append("Username √© obrigat√≥rio")
            elif len(username) < 3:
                errors.append("Username deve ter pelo menos 3 caracteres")
            
            if not full_name:
                errors.append("Nome completo √© obrigat√≥rio")
            
            if email and '@' not in email:
                errors.append("Email inv√°lido")
            
            # Gerar senha se necess√°rio
            final_password = password
            if not password and generate_password:
                final_password = _generate_temp_password()
            
            if not final_password:
                errors.append("Senha √© obrigat√≥ria")
            elif len(final_password) < 8:
                errors.append("Senha deve ter pelo menos 8 caracteres")
            
            if errors:
                for error in errors:
                    st.error(f"‚ùå {error}")
            else:
                # Criar usu√°rio
                user_data = {
                    'username': username.lower().strip(),
                    'full_name': full_name.strip(),
                    'password': final_password,
                    'email': email.strip() if email else None,
                    'department': department.strip() if department else None,
                    'role': role,
                    'status': 'active',
                    'notes': notes.strip() if notes else None
                }
                
                success, message = user_manager.create_user(admin_username, user_data)
                
                if success:
                    st.success(f"‚úÖ {message}")
                    
                    # Mostrar credenciais se geradas
                    if generate_password and not password:
                        st.info(f"üîë **Senha gerada:** `{final_password}`")
                        st.warning("‚ö†Ô∏è Anote esta senha!")
                    
                    # Limpar estado
                    st.session_state['creating_user'] = False
                    st.balloons()
                    st.rerun()
                    
                else:
                    st.error(f"‚ùå {message}")
    
    with col_cancel:
        if st.button("‚ùå Cancelar", use_container_width=True):
            st.session_state['creating_user'] = False
            st.rerun()

def render_user_search_no_forms(admin_username: str, user_manager, is_admin=False):
    """Renderiza busca de usu√°rios SEM formul√°rios - COM PERMISS√ïES CORRIGIDAS"""
    
    st.write("### üîç Busca Avan√ßada de Usu√°rios")
    
    if not is_admin:
        st.error("‚ùå Sem permiss√£o para buscar usu√°rios")
        return
    
    # Campos de busca
    col1, col2 = st.columns(2)
    
    with col1:
        search_query = st.text_input(
            "Termo de busca:",
            placeholder="nome, username, email...",
            key="search_query"
        )
        
        search_role = st.selectbox(
            "Filtrar por Role:",
            ["Todos", "user", "manager", "admin", "super_admin"],
            key="search_role"
        )
    
    with col2:
        search_status = st.selectbox(
            "Filtrar por Status:",
            ["Todos", "active", "inactive", "pending", "suspended"],
            key="search_status"
        )
        
        search_department = st.text_input(
            "Departamento:",
            placeholder="TI, RH...",
            key="search_department"
        )
    
    # Bot√£o de busca
    if st.button("üîç Buscar", type="primary", use_container_width=True):
        # Preparar filtros
        filters = {}
        
        if search_role != "Todos":
            filters['role'] = search_role
        
        if search_status != "Todos":
            filters['status'] = search_status
        
        if search_department:
            filters['department'] = search_department
        
        # Executar busca
        try:
            results = user_manager.search_users(admin_username, search_query, filters)
            
            if results:
                st.success(f"üîç **{len(results)} usu√°rios encontrados**")
                
                # Exibir resultados
                for idx, user in enumerate(results):
                    with st.container():
                        col1, col2, col3 = st.columns([4, 1, 1])
                        
                        with col1:
                            st.write(f"**üë§ {user.get('full_name') or user['username']}**")
                            st.caption(f"@{user['username']} ‚Ä¢ {user.get('email', 'Sem email')}")
                            
                            if user.get('department'):
                                st.caption(f"üè¢ {user['department']}")
                        
                        with col2:
                            st.write(f"üé≠ {user.get('role', 'user').replace('_', ' ').title()}")
                            st.caption(f"üìä {user.get('status', 'active').title()}")
                        
                        with col3:
                            mfa_icon = "üîê" if user.get('mfa_enabled') else "üîì"
                            st.write(f"{mfa_icon} MFA")
                        
                        st.divider()
            
            else:
                st.info("üîç Nenhum usu√°rio encontrado")
        
        except Exception as e:
            st.error(f"‚ùå Erro na busca: {e}")

def render_user_statistics_no_forms(admin_username: str, user_manager, is_admin=False):
    """Renderiza estat√≠sticas de usu√°rios SEM formul√°rios - COM PERMISS√ïES CORRIGIDAS"""
    
    st.write("### üìä Estat√≠sticas de Usu√°rios")
    
    if not is_admin:
        st.error("‚ùå Sem permiss√£o para visualizar estat√≠sticas")
        return
    
    try:
        stats = user_manager.get_user_statistics(admin_username)
        
        if not stats:
            st.info("üìä Sem dados estat√≠sticos dispon√≠veis")
            return
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• Total Usu√°rios", f"{stats.get('total_users', 0):,}")
        
        with col2:
            st.metric("‚úÖ Usu√°rios Ativos", f"{stats.get('active_users', 0):,}")
        
        with col3:
            st.metric("üîê Com MFA", f"{stats.get('mfa_users', 0):,}")
        
        with col4:
            st.metric("üÜï Novos (30d)", f"{stats.get('recent_users', 0):,}")
        
        # Gr√°ficos usando m√©todos nativos do Streamlit
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("#### üìä Distribui√ß√£o por Status")
            status_counts = stats.get('status_counts', {})
            
            if status_counts:
                st.bar_chart(status_counts)
                
                # Tabela detalhada
                for status, count in status_counts.items():
                    percentage = (count / max(stats.get('total_users', 1), 1)) * 100
                    st.write(f"‚Ä¢ **{status.title()}**: {count} ({percentage:.1f}%)")
            else:
                st.info("Sem dados de status")
        
        with col2:
            st.write("#### üé≠ Distribui√ß√£o por Role")
            role_counts = stats.get('role_counts', {})
            
            if role_counts:
                st.bar_chart(role_counts)
                
                # Tabela detalhada
                for role, count in role_counts.items():
                    percentage = (count / max(stats.get('total_users', 1), 1)) * 100
                    display_role = role.replace('_', ' ').title()
                    st.write(f"‚Ä¢ **{display_role}**: {count} ({percentage:.1f}%)")
            else:
                st.info("Sem dados de roles")
        
        # An√°lises
        st.markdown("---")
        st.write("#### üìà An√°lises")
        
        total_users = stats.get('total_users', 0)
        active_users = stats.get('active_users', 0)
        mfa_users = stats.get('mfa_users', 0)
        
        if total_users > 0:
            activity_rate = (active_users / total_users) * 100
            mfa_rate = (mfa_users / total_users) * 100
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("üìà Taxa de Atividade", f"{activity_rate:.1f}%")
                
                if activity_rate >= 90:
                    st.success("‚úÖ Excelente taxa de atividade!")
                elif activity_rate >= 70:
                    st.info("‚ÑπÔ∏è Boa taxa de atividade")
                else:
                    st.warning("‚ö†Ô∏è Taxa de atividade baixa")
            
            with col2:
                st.metric("üîê Taxa de Ado√ß√£o MFA", f"{mfa_rate:.1f}%")
                
                if mfa_rate >= 80:
                    st.success("‚úÖ Excelente ado√ß√£o de MFA!")
                elif mfa_rate >= 50:
                    st.info("‚ÑπÔ∏è Boa ado√ß√£o de MFA")
                else:
                    st.warning("‚ö†Ô∏è Baixa ado√ß√£o de MFA")
        
        # A√ß√µes r√°pidas
        st.markdown("---")
        st.write("#### ‚ö° A√ß√µes R√°pidas")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Atualizar Estat√≠sticas", use_container_width=True):
                st.rerun()
        
        with col2:
            if st.button("üë• Ver Lista Completa", use_container_width=True):
                st.session_state.admin_current_page = "user_management"
                st.rerun()
        
        with col3:
            if st.button("‚ûï Criar Usu√°rio", use_container_width=True):
                st.session_state['creating_user'] = True
                st.rerun()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar estat√≠sticas: {e}")
        logger.error(f"User statistics error: {e}")

def render_admin_dashboard():
    """Dashboard administrativo principal"""
    st.subheader("üìä Dashboard do Sistema")
    
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Estat√≠sticas b√°sicas
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
        user_count = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*), COALESCE(SUM(file_size), 0) FROM files")
        file_stats = cursor.fetchone()
        file_count = file_stats[0] or 0
        total_bytes = file_stats[1] or 0
        total_gb = total_bytes / (1024**3) if total_bytes else 0
        
        cursor.execute("SELECT COUNT(*) FROM files WHERE DATE(uploaded_at) = CURRENT_DATE")
        files_today = cursor.fetchone()[0] or 0
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• Usu√°rios", f"{user_count:,}")
        
        with col2:
            st.metric("üìÑ Arquivos", f"{file_count:,}")
        
        with col3:
            st.metric("üíæ Armazenamento", f"{total_gb:.2f} GB")
        
        with col4:
            st.metric("üì§ Hoje", f"{files_today:,}")
        
        st.markdown("---")
        
        # Link destacado para relat√≥rios avan√ßados
        st.info("üí° **Novo!** Acesse os **Relat√≥rios Avan√ßados** para an√°lises detalhadas com gr√°ficos interativos!")
        
        if st.button("üöÄ Ir para Relat√≥rios Avan√ßados", type="primary", use_container_width=True):
            st.session_state.admin_current_page = "advanced_reports"
            st.rerun()
        
        st.markdown("---")
        
        # A√ß√µes r√°pidas
        st.subheader("‚ö° A√ß√µes R√°pidas")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üë• Gerenciar Usu√°rios", use_container_width=True):
                st.session_state.admin_current_page = "user_management"
                st.rerun()
        
        with col2:
            if st.button("üìÅ Ver Todos os Arquivos", use_container_width=True):
                st.session_state.admin_current_page = "files"
                st.rerun()
        
        with col3:
            if st.button("üìä Relat√≥rios Detalhados", use_container_width=True):
                st.session_state.admin_current_page = "advanced_reports"
                st.rerun()
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dashboard: {e}")
        logger.error(f"Dashboard error: {e}")

def render_admin_users():
    """Lista detalhada de usu√°rios"""
    st.subheader("üë• Administra√ß√£o de Usu√°rios")
    
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Estat√≠sticas de usu√°rios
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
        active_users = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE mfa_enabled = TRUE")
        mfa_users = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE created_at >= NOW() - INTERVAL '30 days'")
        new_users = cursor.fetchone()[0] or 0
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Usu√°rios Ativos", f"{active_users:,}")
        
        with col2:
            st.metric("Com MFA", f"{mfa_users:,}")
        
        with col3:
            st.metric("Novos (30d)", f"{new_users:,}")
        
        st.markdown("---")
        
        # Lista de usu√°rios
        try:
            # Tentar tabela estendida primeiro
            cursor.execute("""
                SELECT username, full_name, email, role, status, created_at, last_login, mfa_enabled
                FROM users_extended
                WHERE is_active = TRUE
                ORDER BY created_at DESC 
                LIMIT 50
            """)
            users = cursor.fetchall()
            columns = ['username', 'full_name', 'email', 'role', 'status', 'created_at', 'last_login', 'mfa_enabled']
            
        except:
            # Fallback para tabela b√°sica
            cursor.execute("""
                SELECT username, email, created_at, mfa_enabled
                FROM users
                WHERE is_active = TRUE
                ORDER BY created_at DESC 
                LIMIT 50
            """)
            users = cursor.fetchall()
            columns = ['username', 'email', 'created_at', 'mfa_enabled']
        
        if users:
            st.write(f"**üìä {len(users)} usu√°rios (√∫ltimos 50)**")
            
            # Criar DataFrame para melhor visualiza√ß√£o
            df = pd.DataFrame(users, columns=columns)
            
            # Formata√ß√£o das colunas
            if 'created_at' in df.columns:
                df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%d/%m/%Y')
            
            if 'last_login' in df.columns:
                df['last_login'] = pd.to_datetime(df['last_login']).dt.strftime('%d/%m/%Y %H:%M')
            
            # Renomear colunas para portugu√™s
            rename_map = {
                'username': 'Usu√°rio',
                'full_name': 'Nome Completo',
                'email': 'Email',
                'role': 'Papel',
                'status': 'Status',
                'created_at': 'Criado em',
                'last_login': '√öltimo Login',
                'mfa_enabled': 'MFA'
            }
            
            df = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})
            
            # Mostrar tabela
            st.dataframe(df, use_container_width=True)
            
        else:
            st.info("Nenhum usu√°rio encontrado")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        st.error(f"Erro ao carregar usu√°rios: {e}")
        logger.error(f"Users admin error: {e}")

def render_admin_files():
    """Lista detalhada de arquivos"""
    st.subheader("üìÅ Administra√ß√£o de Arquivos")
    
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Estat√≠sticas de arquivos
        cursor.execute("SELECT COUNT(*), COALESCE(SUM(file_size), 0) FROM files")
        file_stats = cursor.fetchone()
        total_files = file_stats[0] or 0
        total_bytes = file_stats[1] or 0
        total_gb = total_bytes / (1024**3) if total_bytes else 0
        
        cursor.execute("SELECT COUNT(*) FROM files WHERE DATE(uploaded_at) = CURRENT_DATE")
        files_today = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(DISTINCT uploaded_by) FROM files")
        unique_uploaders = cursor.fetchone()[0] or 0
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Arquivos", f"{total_files:,}")
        
        with col2:
            st.metric("Armazenamento", f"{total_gb:.2f} GB")
        
        with col3:
            st.metric("Hoje", f"{files_today:,}")
        
        with col4:
            st.metric("Usu√°rios Ativos", f"{unique_uploaders:,}")
        
        st.markdown("---")
        
        # Lista b√°sica de arquivos
        cursor.execute("""
            SELECT original_name, uploaded_by, file_size, uploaded_at, file_key
            FROM files
            ORDER BY uploaded_at DESC 
            LIMIT 50
        """)
        
        files = cursor.fetchall()
        
        if files:
            st.write(f"**üìä {len(files)} arquivos mais recentes**")
            
            for idx, (original_name, uploaded_by, file_size, uploaded_at, file_key) in enumerate(files):
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                    
                    with col1:
                        admin_badge = " üõ°Ô∏è" if is_admin_user(uploaded_by) else ""
                        st.write(f"**üìÑ {original_name}**")
                        st.caption(f"üë§ {uploaded_by}{admin_badge}")
                    
                    with col2:
                        size_mb = (file_size or 0) / (1024*1024)
                        if size_mb >= 1024:
                            size_display = f"{size_mb/1024:.2f} GB"
                        else:
                            size_display = f"{size_mb:.1f} MB"
                        st.write(f"üìä {size_display}")
                    
                    with col3:
                        if uploaded_at:
                            st.caption(f"üìÖ {uploaded_at.strftime('%d/%m/%Y')}")
                            st.caption(f"üïí {uploaded_at.strftime('%H:%M')}")
                    
                    with col4:
                        if st.button("üóëÔ∏è", key=f"admin_del_{idx}", help="Deletar arquivo"):
                            if delete_file_admin(file_key, original_name):
                                st.success(f"‚úÖ {original_name} deletado!")
                                st.rerun()
                    
                    st.divider()
        
        else:
            st.info("Nenhum arquivo encontrado")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        st.error(f"Erro ao carregar arquivos: {e}")
        logger.error(f"Files admin error: {e}")

def delete_file_admin(file_key: str, filename: str) -> bool:
    """Deleta arquivo como admin"""
    try:
        from s3_manager import S3Manager
        from database import DatabaseManager
        from config import Config
        
        # Deletar do S3
        s3_manager = S3Manager(
            Config.AWS_ACCESS_KEY_ID,
            Config.AWS_SECRET_ACCESS_KEY,
            Config.AWS_REGION,
            Config.S3_BUCKET
        )
        
        s3_deleted = s3_manager.delete_file(file_key)
        
        # Deletar do banco
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM files WHERE file_key = %s", (file_key,))
        conn.commit()
        
        cursor.close()
        conn.close()
        
        # Log de sucesso
        logger.info(f"Admin deleted file: {filename} ({file_key})")
            
        return True
        
    except Exception as e:
        logger.error(f"Admin file deletion error: {e}")
        st.error(f"Erro ao deletar: {e}")
        return False

def render_reports_section(username: str, user_manager=None):
    """Se√ß√£o de relat√≥rios b√°sicos"""
    st.subheader("üìà Relat√≥rios B√°sicos do Sistema")
    
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Per√≠odo de an√°lise
        period_days = st.selectbox(
            "Per√≠odo de an√°lise:",
            [7, 15, 30, 60, 90],
            index=2,
            format_func=lambda x: f"√öltimos {x} dias"
        )
        
        st.markdown("---")
        
        # Relat√≥rio de atividade
        st.write("### üìä Atividade Recente")
        
        # Uploads por dia
        cursor.execute(f"""
            SELECT DATE(uploaded_at) as dia, COUNT(*) as uploads,
                   COALESCE(SUM(file_size), 0) as bytes_total
            FROM files 
            WHERE uploaded_at >= NOW() - INTERVAL '{period_days or 30} days'
            GROUP BY DATE(uploaded_at)
            ORDER BY dia DESC
        """)
        
        daily_activity = cursor.fetchall()
        
        if daily_activity:
            st.write("**üì§ Atividade dos √∫ltimos dias:**")
            for day, uploads, bytes_total in daily_activity:
                gb_total = bytes_total / (1024**3) if bytes_total else 0
                st.write(f"‚Ä¢ **{day.strftime('%d/%m/%Y')}**: {uploads} uploads ({gb_total:.2f} GB)")
        
        st.markdown("---")
        
        # Top usu√°rios
        st.write("### üèÜ Top Usu√°rios por Uploads")
        
        cursor.execute(f"""
            SELECT uploaded_by, COUNT(*) as total_uploads,
                   COALESCE(SUM(file_size), 0) as total_bytes
            FROM files 
            WHERE uploaded_at >= NOW() - INTERVAL '{period_days} days'
            GROUP BY uploaded_by
            ORDER BY COUNT(*) DESC
            LIMIT 10
        """)
        
        top_users = cursor.fetchall()
        
        if top_users:
            for user, uploads, bytes_total in top_users:
                gb_total = bytes_total / (1024**3) if bytes_total else 0
                admin_badge = " üõ°Ô∏è" if is_admin_user(user) else ""
                st.write(f"‚Ä¢ **{user}{admin_badge}**: {uploads} arquivos ({gb_total:.2f} GB)")
        
        cursor.close()
        conn.close()
        
        # Link para relat√≥rios avan√ßados
        st.markdown("---")
        st.info("üí° **Quer mais detalhes?** Acesse os **Relat√≥rios Avan√ßados** para gr√°ficos interativos!")
        
        if st.button("üöÄ Ir para Relat√≥rios Avan√ßados", type="primary"):
            st.session_state.admin_current_page = "advanced_reports"
            st.rerun()
        
    except Exception as e:
        st.error(f"Erro nos relat√≥rios b√°sicos: {e}")
        logger.error(f"Basic reports error: {e}")

def render_advanced_reports_section(username: str, user_manager=None):
    """Renderiza se√ß√£o de relat√≥rios avan√ßados com gr√°ficos"""
    
    try:
        # Importar sistema de relat√≥rios avan√ßados
        from enhanced_admin_reports import render_enhanced_reports_section
        from database import DatabaseManager
        from config import Config
        
        # Inicializar database manager
        db_manager = DatabaseManager(Config.DATABASE_URL)
        
        # Renderizar relat√≥rios avan√ßados
        render_enhanced_reports_section(username, user_manager, db_manager)
        
    except ImportError as import_error:
        logger.error(f"Enhanced reports not available: {import_error}")
        st.error("‚ùå Sistema de relat√≥rios avan√ßados n√£o dispon√≠vel")
        st.info("Execute o comando abaixo para instalar as depend√™ncias:")
        
        st.code("pip install plotly>=5.15.0 pandas>=1.5.0 numpy>=1.24.0 matplotlib>=3.6.0 seaborn>=0.12.0")
        
        # Verificar quais depend√™ncias est√£o faltando
        missing_deps = []
        
        try:
            import plotly
        except ImportError:
            missing_deps.append("plotly")
        
        try:
            import pandas
        except ImportError:
            missing_deps.append("pandas")
        
        try:
            import numpy
        except ImportError:
            missing_deps.append("numpy")
        
        if missing_deps:
            st.warning(f"Depend√™ncias faltando: {', '.join(missing_deps)}")
        
        # Fallback para relat√≥rios b√°sicos
        st.markdown("---")
        st.warning("üìä Usando relat√≥rios b√°sicos como alternativa")
        render_reports_section(username, user_manager)
        
    except Exception as e:
        logger.error(f"Advanced reports error: {e}")
        st.error(f"‚ùå Erro nos relat√≥rios avan√ßados: {e}")
        
        # Informa√ß√µes de debug simplificadas
        with st.expander("üîç Informa√ß√µes de Debug"):
            st.write("**Erro:**", str(e))
            st.write("**Usu√°rio:**", username)
            st.write("**Timestamp:**", datetime.now().isoformat())
        
        # Tentar relat√≥rios b√°sicos como fallback
        st.markdown("---")
        st.warning("üìä Tentando carregar relat√≥rios b√°sicos...")
        try:
            render_reports_section(username, user_manager)
        except Exception as fallback_error:
            st.error(f"‚ùå Erro tamb√©m nos relat√≥rios b√°sicos: {fallback_error}")

def render_system_logs_section():
    """Se√ß√£o para visualiza√ß√£o de logs do sistema"""
    st.subheader("üìã Logs do Sistema")
    
    try:
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Verificar se tabela de logs existe
        try:
            cursor.execute("""
                SELECT admin_username, action, target_username, timestamp, 
                       ip_address, details, success
                FROM admin_logs
                ORDER BY timestamp DESC
                LIMIT 100
            """)
            
            logs = cursor.fetchall()
            
            if logs:
                st.write("### üìã Logs Administrativos (√∫ltimos 100)")
                
                # Lista de logs
                for log in logs[:20]:  # Mostrar apenas 20 para performance
                    admin_username, action, target_username, timestamp, ip_address, details, success = log
                    
                    with st.container():
                        col1, col2, col3, col4 = st.columns([2, 2, 1, 1])
                        
                        with col1:
                            status_icon = "‚úÖ" if success else "‚ùå"
                            st.write(f"{status_icon} **{action}**")
                            st.caption(f"üë§ Admin: {admin_username}")
                        
                        with col2:
                            if target_username:
                                st.write(f"üéØ Alvo: {target_username}")
                            st.caption(f"üåê IP: {ip_address or 'N/A'}")
                        
                        with col3:
                            st.caption(f"üìÖ {timestamp.strftime('%d/%m/%Y')}")
                            st.caption(f"üïí {timestamp.strftime('%H:%M:%S')}")
                        
                        with col4:
                            if details:
                                if st.button("üìã", key=f"details_{timestamp}", help="Ver detalhes"):
                                    st.info(f"Detalhes: {details}")
                        
                        st.divider()
            
            else:
                st.info("üìã Nenhum log administrativo encontrado")
        
        except Exception as e:
            st.info("‚ö†Ô∏è Tabela de logs n√£o dispon√≠vel")
            st.write("Para habilitar logs administrativos, certifique-se de que o sistema de gerenciamento de usu√°rios esteja ativo.")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar logs: {e}")
        logger.error(f"System logs error: {e}")

# Fun√ß√µes auxiliares
def _basic_admin_check(username: str) -> bool:
    """Verifica√ß√£o b√°sica de admin (fallback)"""
    return 'admin' in username.lower()

def _generate_temp_password(length: int = 12) -> str:
    """Gera senha tempor√°ria segura"""
    characters = string.ascii_letters + string.digits + "!@#$%&*"
    password = ''.join(secrets.choice(characters) for _ in range(length))
    
    # Garantir que tem pelo menos 1 mai√∫scula, 1 min√∫scula, 1 n√∫mero e 1 s√≠mbolo
    while not (any(c.islower() for c in password) and 
               any(c.isupper() for c in password) and 
               any(c.isdigit() for c in password) and 
               any(c in "!@#$%&*" for c in password)):
        password = ''.join(secrets.choice(characters) for _ in range(length))
    
    return password

def _reset_user_password_simple(admin_username: str, target_username: str, new_password: str, user_manager) -> tuple[bool, str]:
    """Reset de senha simplificado"""
    try:
        # Hash da nova senha
        password_hash = hashlib.sha256(new_password.encode()).hexdigest()
        
        # Atualizar usando o user_manager ou diretamente no banco
        from database import DatabaseManager
        from config import Config
        
        db_manager = DatabaseManager(Config.DATABASE_URL)
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Tentar atualizar na tabela estendida
        try:
            cursor.execute("""
                UPDATE users_extended 
                SET password_hash = %s, must_change_password = TRUE, updated_at = %s
                WHERE username = %s
            """, (password_hash, datetime.now(), target_username))
            
            if cursor.rowcount == 0:
                # Fallback para tabela b√°sica
                cursor.execute("""
                    UPDATE users 
                    SET password_hash = %s
                    WHERE username = %s
                """, (password_hash, target_username))
        
        except:
            # Fallback para tabela b√°sica
            cursor.execute("""
                UPDATE users 
                SET password_hash = %s
                WHERE username = %s
            """, (password_hash, target_username))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        return True, f"Senha resetada para {target_username}"
        
    except Exception as e:
        logger.error(f"Password reset error: {e}")
        return False, f"Erro ao resetar senha: {str(e)}"

# Fun√ß√£o para verifica√ß√£o de admin (mantida para compatibilidade)
def is_admin_user(username: str) -> bool:
    """Verifica√ß√£o de admin - MAIS ROBUSTA E CONFI√ÅVEL"""
    return check_admin_permissions_comprehensive(username)

# Log de inicializa√ß√£o
logger.info("‚úÖ Complete admin pages system with HARD DELETE functionality loaded successfully")
